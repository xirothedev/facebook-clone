enum Scope {
  EVERYONE
  FRIENDS_ONLY
  PRIVATE
}

model Media {
  id String @id

  originalName String       @db.VarChar(200)
  url          String       @unique @db.VarChar(200)
  secure_url   String       @unique @db.VarChar(200)
  width        Int
  height       Int
  format       String       @db.VarChar(20)
  resourceType ResourceType

  createdAt DateTime @default(now())
}

enum ResourceType {
  image
  video
  raw
  auto
}

model Notification {
  id        String    @id @default(uuid()) @db.Uuid()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  readAt    DateTime?
  deletedAt DateTime?

  // Recipient of the notification
  recipientId String @db.Uuid
  recipient   User   @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Actor who triggered the notification (can be null for system notifications)
  actorId String? @db.Uuid
  actor   User?   @relation("UserNotificationActions", fields: [actorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Notification type and content
  type     NotificationType
  title    String
  message  String
  status   NotificationStatus   @default(UNREAD)
  priority NotificationPriority @default(NORMAL)

  // Related content references (optional)
  postId          String?
  commentId       String?
  reactionId      String?
  friendRequestId String? // For friendship notifications

  // Additional data for rich notifications
  imageUrl  String?
  actionUrl String? // URL to navigate when notification is clicked
  metadata  Json? // Additional data like reaction type, comment preview, etc.

  // Grouping and aggregation
  groupId    String? // For grouping similar notifications
  isGrouped  Boolean @default(false)
  groupCount Int     @default(1)

  // Indexes for performance
  @@index([recipientId, status])
  @@index([recipientId, createdAt])
  @@index([type, createdAt])
  @@index([groupId])
}

// Notification types similar to Facebook
enum NotificationType {
  // Social interactions
  POST_LIKE
  POST_COMMENT
  POST_SHARE
  COMMENT_LIKE
  COMMENT_REPLY

  // Friendship
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
  FRIEND_SUGGESTION

  // Profile interactions
  PROFILE_VIEW
  PROFILE_UPDATE
  BIRTHDAY_REMINDER

  // Group activities
  GROUP_INVITE
  GROUP_POST
  GROUP_EVENT

  // Page activities
  PAGE_LIKE
  PAGE_POST
  PAGE_EVENT

  // Event activities
  EVENT_INVITE
  EVENT_UPDATE
  EVENT_REMINDER

  // Marketplace
  MARKETPLACE_LISTING
  MARKETPLACE_MESSAGE

  // System notifications
  SECURITY_ALERT
  ACCOUNT_UPDATE
  POLICY_UPDATE
  MAINTENANCE

  // Live and stories
  LIVE_STREAM
  STORY_MENTION
  STORY_REACTION

  // Memories
  MEMORY_REMINDER
  PHOTO_TAG
  PHOTO_APPROVAL
}

// Notification status
enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
  DELETED
}

// Notification priority for sorting and highlighting
enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model Post {
  id        String     @id @default(cuid())
  authorId  String     @db.Uuid
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  scope     Scope
  status    PostStatus

  content String?
  medias  String[]

  reactions Reaction[]
  comments  Comment[]
}

model Comment {
  id       String @id @default(cuid())
  authorId String @db.Uuid
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content  String

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  parentId String? // nullable nếu là comment gốc
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  deletedAt       DateTime?
  updateHistories Json[]
  status          CommentStatus
  reations        Reaction[]
}

model Reaction {
  id       String       @id @default(cuid())
  authorId String       @db.Uuid
  author   User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type     ReactionType

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CommentStatus {
  DISPLAY
  HIDDEN
  DELETED
  PENDING
}

enum PostStatus {
  DISPLAY
  DELETED
  STORAGED
  SUSPENDED
  HIDDEN
}

enum ReactionType {
  LIKE
  LOVE
  CARE
  HAHA
  WOW
  SAD
  ANGRY
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  engineType      = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========= Preferences =========
model Preference {
  id     String @id @default(uuid())
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  type PreferenceType

  // ========== Notifications ==========
  notificationType NotificationType? // enum nằm ở file riêng
  push             Boolean?          @default(false)
  email            Boolean?          @default(false)
  sms              Boolean?          @default(false)

  // ========== Reaction ==========
  reactionTarget ReactionTarget?
  hidden         Boolean?        @default(false)

  // ========== Accessibility ==========
  reduceMotion Boolean? @default(false)
  screenReader Boolean? @default(false)

  // ========== Language & Region ==========
  languageCode String? // e.g., "en", "vi"
  timezone     String? // e.g., "Asia/Ho_Chi_Minh"
  locale       String? // e.g., "en_US", "vi_VN"

  // ========== Dark Mode ==========
  darkModeEnabled Boolean? @default(false)

  // ========== Media Preferences ==========
  videoQuality       VideoQuality @default(DEFAULT)
  autoPlayAnimations Boolean      @default(false)
  alwaysShowCaptions Boolean      @default(false)
  quietMode          Boolean      @default(false)

  // ========== Caption Display ==========
  backGroundColor   CoLor @default(BLACK)
  backGroundOpacity Float @default(45)
  textColor         CoLor @default(WHITE)
  textSize          Float @default(100)

  // ========== Constraints ==========
  @@unique([userId, notificationType])
  @@unique([userId, reactionTarget])
  @@unique([userId, videoQuality])
}

// ========= Audience & Visibility =========
model AudienceAndVisibility {
  id     String @id @default(uuid())
  userId String @unique @db.Uuid
  user   User   @relation(name: "UserAudienceVisibility", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  // ========== How People Find and Contact You ==========
  whoCanSendFriendRequest    SendFriendRequest @default(EVERYONE)
  whoCanSeeListFriends       Audience          @default(PUBLIC)
  peopleWithYourEmailAddress Audience          @default(PUBLIC)
  peopleWithYourPhoneNumber  Audience          @default(PUBLIC)
  searchAccountByLink        Boolean           @default(true)

  // ========== Message Request Settings ==========
  forFriendsOfFriendRequest TypeSendMessage @default(MESSAGEREQUESTS)
  forPeopleMultialGroup     TypeSendMessage @default(CHATS)
  forPageFollow             TypeSendMessage @default(MESSAGEREQUESTS)
  forOtherPeople            TypeSendMessage @default(MESSAGEREQUESTS)

  // ========== Post Visibility ==========
  whoCanseeYourFuturePosts   Audience @default(ONLYME)
  limitWhoCanSeePastPost     Boolean  @default(false)
  allCommentSummariesOnPosts Boolean  @default(true)

  // ========== Story Settings ==========
  whoCanSeeYourStories       Audience @default(PUBLIC)
  allowOtherShareYourStories Boolean  @default(true)
  archivingStories           Boolean  @default(true)

  // ========== Reels Settings ==========
  allowOtherShareaYourReels Boolean  @default(true)
  whoCanSeeYourReels        Audience @default(PUBLIC)

  // ========== Follower & Public Content ==========
  whoCanFollowMe                Audience @default(PUBLIC)
  whoCanSeeYourFollowers        Audience @default(PUBLIC)
  whoCanSeeSomethingYouFollow   Audience @default(PUBLIC)
  whoCanCommentYourPosts        Audience @default(PUBLIC)
  publicPostNotification        Audience @default(PUBLIC)
  publicProfileInfo             Audience @default(PUBLIC)
  showMostRelevantCommentsFirst Boolean  @default(true)
  offFacebookPreviews           Boolean  @default(true)
  hideSomethingOnYourProfile    String   @db.VarChar(1000)

  // ========== Profile & Tagging ==========
  whoCanPostYourProfile                  Audience @default(FRIENDS)
  whoCanSeeWhatOtherPostOnYourProfile    Audience @default(FRIENDS)
  allowOtherShareYourPostsToTheirStories Boolean  @default(true)
  whoCanSeePostsYouTagOnYourProfile      Audience @default(FRIENDS)
  whoYouWannaToTagAndNotRead             Audience @default(FRIENDS)
  reviewPeopleAddToYourPostBeforePublish Boolean  @default(false)
  reviewPostBeforePublish                Boolean  @default(true)

  // ========== Blocking ==========
  restrictedList         User[] @relation("RestrictedList")
  blockedProfilesOrPages User[] @relation("BlockedProfilesOrPages")
  blockMessages          User[] @relation("BlockMessages")

  @@unique([userId, whoCanSeeListFriends])
  @@unique([userId, whoCanSendFriendRequest])
}

// ========= Enums =========

enum PreferenceType {
  NOTIFICATION
  REACTION
  ACCESSIBILITY
  LANGUAGE
  DARKMODE
}

enum ReactionTarget {
  OTHER_PEOPLE
  MYSELF
}

enum VideoQuality {
  DEFAULT
  SDONLY
  HDIFAVAILABLE
}

enum CoLor {
  BLACK
  BLUE
  GREEN
  CYAN
  RED
  MAGENTA
  WHITE
  YELLOW
}

enum SendFriendRequest {
  EVERYONE
  FRIENDSOFFRIENDS
}

enum Audience {
  PUBLIC
  FRIENDS
  FRIENDSEXCEPT
  SPECIFICFRIENDS
  ONLYME
  CUSTOM
}

enum TypeSendMessage {
  CHATS
  MESSAGEREQUESTS
  DONNOTRECEIVE
}

model User {
  id        String        @id @default(uuid()) @db.Uuid()
  profileId String        @unique
  createdAt DateTime      @default(now())
  updateAt  DateTime      @updatedAt
  status    StatusAccount @default(ACTIVE)
  flags     UserFlag[]
  roles     UserRole[]

  // email
  primaryEmailId String  @unique @db.Uuid
  primaryEmail   Email   @relation("PrimaryEmail", fields: [primaryEmailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subEmails      Email[] @relation("SubEmails")

  // phone
  primaryPhoneId String? @unique @db.Uuid
  primaryPhone   Phone?  @relation("PrimaryPhone", fields: [primaryPhoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subPhones      Phone[] @relation("SubPhones")

  // information
  hashedPassword String
  displayName    String
  username       String? @unique

  // addition information
  gender        Gender
  pronoun       String?
  birthday      DateTime
  biography     String?
  websites      String[]
  language      String?
  socialLinkeds SocialLinkeds[]

  // other user relation
  sentRelations          Relation[]   @relation("SentRelations")
  receivedRelations      Relation[]   @relation("ReceivedRelations")
  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")

  // metadata
  deletedAt DateTime?

  // user media
  avatarUrl String?
  bannerUrl String?

  // relations
  posts               Post[]
  session             Session[]
  comments            Comment[]
  reactions           Reaction[]
  auth                Authentication[]
  notifications       Notification[]   @relation("UserNotifications")
  notificationActions Notification[]   @relation("UserNotificationActions")

  Preference Preference[]

  // Audience & Visibility relations
  audienceAndVisibility AudienceAndVisibility?  @relation("UserAudienceVisibility")
  restrictedBy          AudienceAndVisibility[] @relation("RestrictedList")
  blockedBy             AudienceAndVisibility[] @relation("BlockedProfilesOrPages")
  blockedMessagesBy     AudienceAndVisibility[] @relation("BlockMessages")
}

model Friendship {
  requesterId  String     @db.Uuid
  addresseeId  String     @db.Uuid
  status       Status     @default(PENDING)
  statusCustom CustomUser @default(ACCQUAINTANCES)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  requester User @relation("SentFriendRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("ReceivedFriendRequests", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId], name: "id") // không cho phép trùng lời mời
}

model Relation {
  sourceUserId String       @db.Uuid
  targetUserId String       @db.Uuid
  type         RelationType
  status       Status
  statusCustom CustomUser   @default(ACCQUAINTANCES)
  scope        Scope
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  sourceUser User @relation("SentRelations", fields: [sourceUserId], references: [id], onDelete: Cascade)
  targetUser User @relation("ReceivedRelations", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([sourceUserId, targetUserId, type], name: "id")
}

model Email {
  id    String @id @default(uuid()) @db.Uuid
  value String
  scope Scope  @default(EVERYONE)

  subEmailsUserId  String? @db.Uuid
  primaryEmailUser User?   @relation("PrimaryEmail")
  subEmailsUser    User?   @relation("SubEmails", fields: [subEmailsUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Phone {
  id    String @id @default(uuid()) @db.Uuid
  value String
  scope Scope  @default(EVERYONE)

  subPhonesUserId  String? @db.Uuid
  primaryPhoneUser User?   @relation("PrimaryPhone")
  subPhonesUser    User?   @relation("SubPhones", fields: [subPhonesUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SocialLinkeds {
  id       String   @id @default(uuid())
  platform Platform
  userId   String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Authentication {
  code      String
  expiresAt DateTime? @db.Timestamptz

  type   AuthType
  userId String   @db.Uuid
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime? @updatedAt

  @@unique([userId, type], name: "id")
}

model Session {
  id                 String    @id @default(uuid()) @db.Uuid
  expiresAt          DateTime? @db.Timestamptz
  createdAt          DateTime  @default(now()) @db.Timestamptz
  lastLoginAt        DateTime? @default(now()) @db.Timestamptz
  refreshTokenHashed String?   @db.VarChar(255)
  deviceName         String?
  userAgent          String?   @db.VarChar(255)
  ipAddress          String?   @db.VarChar(45)
  userId             String    @unique @db.Uuid
  revoked            Boolean   @default(false)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

enum AuthType {
  VERIFICATION
  RESET_PASSWORD
  REACTIVE
  RECOVERY
}

enum UserFlag {
  SUSPENDED
  DELETED
  ACTIVE
  OFFLINE
  HIDDEN
}

enum UserRole {
  ADMINISTRATOR
  USER
}

enum RelationType {
  FARTHER
  MORTHER
  DAUGHTER // Con gái
  SON // Con trai
  YOUNG_SISTER
  YOUNG_BROTHER
  SISTER
  BROTHER
}

enum CustomUser {
  ACCQUAINTANCES
  CLOSEFRIENDS
  RESTRICTED
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Platform {
  GITHUB
  INSTAGRAM
  TIKTOK
  YOUTUBE
  THREADS
  X
  SNAPCHAT
  TWITCH
  WHATSAPP
  LINE
  WECHAT
  KIK
  PINTEREST
  TUMBLR
  ASK_FM
  SOUNDCLOUD
  SPOTIFY
  LINKEDIN
  SKYPE
  QQ
  KAKAO_TALK
  VK
  OK
  OCULUS
}

enum StatusAccount {
  ACTIVE
  DISABLE // Bị khóa do vi phạm chính sách
  RESTRICTED // Bị hạn chế tính năng
  CHECKPOINT // Cần xác minh danh tính
  BANNED //	Khóa vĩnh viễn
  DEACTIVATED // tạm thời vô hiệu hóa thủ công
}
