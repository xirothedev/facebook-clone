model Post {
  id        String     @id @default(cuid())

  // realtions
  authorId  String     @db.Uuid
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  pageId String? @db.Uuid()
  page Page? @relation(fields: [pageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  scope     Scope
  status    PostStatus

  content String?
  medias  String[]

  reactions Reaction[]
  comments  Comment[]
}

model Comment {
  id       String @id @default(cuid())
  authorId String @db.Uuid
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content  String

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  parentId String? // nullable nếu là comment gốc
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  deletedAt       DateTime?
  updateHistories Json[]
  status          CommentStatus
  reations        Reaction[]
}

model Reaction {
  id       String       @id @default(cuid())
  authorId String       @db.Uuid
  author   User         @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type     ReactionType

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CommentStatus {
  DISPLAY
  HIDDEN
  DELETED
  PENDING
}

enum PostStatus {
  DISPLAY
  DELETED
  STORAGED
  SUSPENDED
  HIDDEN
}

enum ReactionType {
  LIKE
  LOVE
  CARE
  HAHA
  WOW
  SAD
  ANGRY
}
