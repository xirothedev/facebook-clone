enum Scope {
  EVERYONE
  FRIENDS_ONLY
  PRIVATE
}

model Media {
  id String @id

  originalName String       @db.VarChar(200)
  url          String       @unique @db.VarChar(200)
  secure_url   String       @unique @db.VarChar(200)
  width        Int
  height       Int
  format       String       @db.VarChar(20)
  resourceType ResourceType

  createdAt DateTime @default(now())
}

enum ResourceType {
  image
  video
  raw
  auto
}

model Post {
  id        String     @id @default(cuid())
  authorId  String
  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  scope     Scope
  status    PostStatus

  content String
  medias  String[]

  reactions Reaction[]
  comments  Comment[]
}

model Comment {
  id       String @id @default(cuid())
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  parentId String? // nullable nếu là comment gốc
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  updateHistories String[]
  status          CommentStatus
  reations        Reaction[]
}

model Reaction {
  id       String @id @default(cuid())
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum CommentStatus {
  DISPLAY
  HIDDEN
  DELETED
  PENDING
}

enum PostStatus {
  DISPLAY
  DELETED
  STORAGED
  SUSPENDED
  HIDDEN
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../generated"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  engineType      = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid()) @db.Uuid()
  profileId String
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  flags     UserFlag[]

  // email
  primaryEmailId String  @unique
  primaryEmail   Email   @relation("PrimaryEmail", fields: [primaryEmailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subEmails      Email[] @relation("SubEmails")

  // phone
  primaryPhoneId String? @unique
  primaryPhone   Phone?  @relation("PrimaryPhone", fields: [primaryPhoneId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subPhones      Phone[] @relation("SubPhones")

  // information
  hashedPassword String
  displayName    String
  username       String?

  // addition information
  gender        Gender
  pronoun       String?
  birthday      DateTime
  biography     String?
  websites      String[]
  language      String?
  socialLinkeds SocialLinkeds[]

  // other user relation
  sentRelations          Relation[]   @relation("SentRelations")
  receivedRelations      Relation[]   @relation("ReceivedRelations")
  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")

  // metadata
  deletedAt DateTime?

  // user media
  avatarUrl String?
  bannerUrl String?

  // relations
  posts     Post[]
  comments  Comment[]
  reactions Reaction[]
}

model Friendship {
  requesterId String
  addresseeId String
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requester User @relation("SentFriendRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("ReceivedFriendRequests", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId], name: "id") // không cho phép trùng lời mời
}

model Relation {
  sourceUserId String
  targetUserId String
  type         RelationType
  status       Status
  scope        Scope
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  sourceUser User @relation("SentRelations", fields: [sourceUserId], references: [id], onDelete: Cascade)
  targetUser User @relation("ReceivedRelations", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([sourceUserId, targetUserId, type], name: "id")
}

model Email {
  id    String @id @default(uuid()) @db.Uuid
  value String
  scope Scope

  subEmailsUserId  String?
  primaryEmailUser User?   @relation("PrimaryEmail")
  subEmailsUser    User?   @relation("SubEmails", fields: [subEmailsUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Phone {
  id    String @id @default(uuid()) @db.Uuid
  value String
  scope Scope

  subEmailsUserId  String?
  primaryPhoneUser User?   @relation("PrimaryPhone")
  subPhonesUser    User?   @relation("SubPhones", fields: [subEmailsUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SocialLinkeds {
  id       String   @id @default(uuid())
  platform Platform
  userId   String   @db.Uuid
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum UserFlag {
  SUSPENDED
  DELETED
  ACTIVE
  OFFLINE
  HIDDEN
}

enum RelationType {
  FARTHER
  MORTHER
  DAUGHTER // Con gái
  SON // Con trai
  YOUNG_SISTER
  YOUNG_BROTHER
  SISTER
  BROTHER
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Platform {
  GITHUB
  INSTAGRAM
  TIKTOK
  YOUTUBE
  THREADS
  X
  SNAPCHAT
  TWITCH
  WHATSAPP
  LINE
  WECHAT
  KIK
  PINTEREST
  TUMBLR
  ASK_FM
  SOUNDCLOUD
  SPOTIFY
  LINKEDIN
  SKYPE
  QQ
  KAKAO_TALK
  VK
  OK
  OCULUS
}
